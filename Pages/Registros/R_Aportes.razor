@page "/registrodeaportes"

@inject AportesBLL aportesBLL
@inject NotificationService notificationService

<h3>Registro de Aportes</h3>

<EditForm Model="Aportes" OnInvalidSubmit="Guardar">
		<DataAnnotationsValidator />
		
    <label>AporteId</label>

    <div class="input-group">
        <InputNumber @bind-Value="Aportes.AportesId" class="input"></InputNumber>
        <button type="button" class=" input btn oi oi-magnifying-glass btn-outline-dark" @onclick="Buscar"></button>
    </div>

    <label>Fecha</label>

    <div class="input-group">
        <InputDate @bind-Value="Aportes.Fecha" @oninput="@(e => campoVacio = string.IsNullOrEmpty(e.Value.ToString()))" class="input"></InputDate>
    </div>   

    <label>Persona</label>

    <div class=" input-group-lg">
        <InputText @bind-Value="Aportes.Persona" @oninput="@(e => campoVacio = string.IsNullOrEmpty(e.Value.ToString()))" class="input"></InputText>
    </div>

    <label>Observaci&oacute;n</label>

    <div class=" input-group">
        <InputText @bind-Value="Aportes.Observacion" @oninput="@(e => campoVacio = string.IsNullOrEmpty(e.Value.ToString()))" class="input"></InputText>
    </div>

    <label>Monto</label>
    <div class=" input-group">
        <InputNumber @bind-Value="Aportes.Monto" @oninput="@(e => campoVacio = string.IsNullOrEmpty(e.Value.ToString()))" class="input"></InputNumber>
    </div>

    <br />
    <br />
    <br />
    <br />
    <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
    <button type="submit" class="btn btn-success">Guardar <i class="oi oi-document" /></button>
    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
    <ValidationSummary />
</EditForm>


@code{
    public Aportes? Aportes { get; set; } = new Aportes();

    [Parameter]
    public int AportesId { get; set; }

    public bool campoVacio = false;

    protected override void OnInitialized()
    {
        if(AportesId > 0)
        {
            Aportes.AportesId = AportesId;
            Buscar();
        }
    }
    public void Buscar()
    {
        var aporteEncontrado = aportesBLL.Buscar(Aportes.AportesId);

        if (aporteEncontrado != null)
        {
            this.Aportes = aporteEncontrado;

            var notificaion = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Encontrado",
                    Detail = "El aporte ha sido encontrado",
                    Duration = 4_000
                };
        }
        else
        {
            var notificacion = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No encontrado",
                    Detail = "No existe ningun aporte con estos datos",
                    Duration = 4_000
                };
            notificationService.Notify(notificacion);
            this.Nuevo();
        }
    }
    public void Nuevo()
    {
        this.Aportes = new Aportes();
    }
    public bool Validar()
    {
        if (this.Aportes.Persona == null)
            return true;
        else
            return false;
    }

    public void Guardar()
    {
        if (Validar())
        {
            var notificacion = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se pudo guardar el aporte correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(notificacion);
            return;
        }
        var aporteGuardado = aportesBLL.Guardar(this.Aportes);
        if (aporteGuardado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Exitoso",
                    Detail = "El cliente fue guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
    }

    public void Eliminar()
    {
        var aporteEliminado = aportesBLL.Eliminar(this.Aportes);
        if (aportesBLL.Existe(Aportes.AportesId) && aporteEliminado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Confirmación",
                    Detail = "Cliente Eliminado Correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
        }
        else
        {
            var notificacion = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El Cliente no Existe",
                    Duration = 4_000
                };
            notificationService.Notify(notificacion);
            return;
        }
    }

}
